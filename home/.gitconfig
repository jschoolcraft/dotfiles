[branch]
  autosetupmerge = always
[push]
  default = current
[color]
  diff = auto
  status = auto
  branch = auto
  ui = auto
[core]
  excludesfile = ~/.gitignore
  editor = vim
[merge]
  summary = true
  verbosity = 1
  tool = p4merge
[apply]
  whitespace = nowarn
[format]
  pretty=format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset
[user]
  name = Jeff Schoolcraft
  email = jeff@thequeue.net
[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"
[mergetool]
	keepTemporaries = false
	prompt = false
[alias]
  # adding
  a = add
  aa = add --all

  # branch
  b = branch -v

  # commit
  c      = commit -m
  ca     = commit -am
  ci     = commit
  amend  = commit --amend
  ammend = commit --amend

  # checkout
  co = checkout

  # cherry-pick
  cp = cherry-pick -x

  # diff
  di = diff
  dc = diff --cached
  last = diff HEAD^

  # log
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  l = log --graph --abbrev-commit --date=relative
  la = !git l --all
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  lc = log ORIG_HEAD.. --stat --no-merges datetag = "tag `date '+%Y%m%d%H%M'`"
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # remote
  r = remote -v

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s        = status -sb             # status
  st       = status -sb             # status
  stat     = status -sb             # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit