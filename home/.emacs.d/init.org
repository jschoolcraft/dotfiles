#+property: header-args:emacs-lisp :tangle init.el
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This file is programmatically generated from the corresponding .org file in this directory
  ;; You should make any changes there and regenerate it from Emacs org-mode using org-babel-tangle
#+end_src

#+title: My Emacs Configuration
#+author: Jeff Schoolcraft
#+email: jschoolcraft@aissaclabs.com

* References

I've been inspired by and stolen configuration from loads of places

- https://github.com/joedicastro/dotfiles/tree/master/emacs
- https://github.com/howardabrams/dot-files/blob/master/emacs.org
- https://github.com/zzamboni/dot-emacs
- https://github.com/brainlessdeveloper/emacs.d/blob/master/config.org

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeff Schoolcraft")
(setq user-mail-address "jschoolcraft@aissaclabs.com")
#+END_SRC

* Package Management

** Performance tweaks

#+BEGIN_SRC emacs-lisp
 (setq gc-cons-threshold (* 512 1024 1024))
 (setq gnutls-min-prime-bits 4096)
#+END_SRC

** Customizations File

#+BEGIN_SRC emacs-lisp
        (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
        (when (file-exists-p custom-file)
          (load custom-file))
#+END_SRC

** Package archives

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu"       . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("mela-stable" . "https://stable.melpa.org/packages/"))
  (package-initialize)
#+END_SRC

** use-package

Trying to use [[https://github.com/jwiegley/use-package][use-package]] for all of our package needs

We bootstrap it if we don't have it already.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'diminish))

  (eval-when-compile
    (require 'use-package)
    (require 'diminish))
#+END_SRC

** Sane defaults

If we're declaring =use-package= there's a pretty good chance we want it installed, so let's make that the default.

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'use-package-always-ensure t)
#+END_SRC

Let's also make **defer** the default.

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'use-package-always-defer t)
#+END_SRC

Use the newer package, even if it's not compiled.

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'load-prefer-newer t)
#+END_SRC

** Auto-compile

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :defer nil
    :config (auto-compile-on-load-mode))
#+END_SRC

* General

** UTF-8

#+BEGIN_SRC emacs-lisp
  ;; UTF-8
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-language-environment    'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
  (set-input-method nil)
#+END_SRC

** Keystroke

Display unfinished keystrokes more quickly.

#+BEGIN_SRC emacs-lisp
  (setq echo-keystrokes 0.25) ;display unfinished keystroke more quickly (defaults 1 second)
#+END_SRC

** Conveniences

Restart emacs inside emacs.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

Use the system clipboard

#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard t)
#+END_SRC

Hate trailing whitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
        auto-save-list-file-prefix nil
        make-backup-files nil)
#+END_SRC

* Evil

I'm a vim user at heart.  I like modal editing and I have years of movement commands and leader sequences built into muscle memory and I'd like to keep all that.

So we'll be using [[https://github.com/emacs-evil/evil][evil]].

** The Basics

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :defer nil
    :init
    (setq evil-want-integration nil)
    :bind
    ;; moving around windows
    (:map evil-normal-state-map
          ("C-h" . 'evil-window-left)
          ("C-j" . 'evil-window-down)
          ("C-k" . 'evil-window-up)
          ("C-l" . 'evil-window-right)
          )
    ;; swap 0 and ^ so 0 goes back to first non-whitespace character
    (:map evil-motion-state-map
          ("0" . 'evil-first-non-blank)
          ("^" . 'evil-beginning-of-line)
          )
    :config
    (evil-mode 1))
#+END_SRC

** More Evil

Evil is a great start, but there's a lot more to do if we're going to wrangle emacs into an editor that works the way we want it to.

[[https://github.com/emacs-evil/evil-collection][evil-collection]] provides loads of config, mostly (all?) keybindings for a bunch of things not covered by evil proper.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

** evil-org-mode

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme))))
#+END_SRC

** [ESC]ing all the things

Serious headaches when you're in, e.g. =helm-M-x= and all you want to do is quit the minibuffer and you're banging on =[ESC]= and nothing happens.

Hopefully [[https://github.com/syl20bnr/evil-escape][evil-escape]] fixes that.

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :after evil
    :config
    (evil-escape-mode t))
#+END_SRC

If that doesn't work, we'll try this.

#+BEGIN_SRC emacs-lisp
;; (defun minibuffer-keyboard-quit ()
;; (interactive)
;; (if (and delete-selection-mode transient-mark-mode mark-active)
;;     (setq deactivate-mark  t)
;; (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
;; (abort-recursive-edit)))
;;
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

** Evil Leader


[[https://github.com/cofi/evil-leader][evil-leader]] to map leader keybindings to commands.

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :after evil
  :defer nil
  :config
  (global-evil-leader-mode))
#+END_SRC

There are a couple other options to evil-leader:

- https://github.com/noctuid/evil-guide/wiki#using-hydra-for-leader-key
- [[https://github.com/noctuid/general.el][general]]

#+begin_src emacs-lisp
;; https://github.com/linktohack/evil-commentary
(use-package evil-commentary
  :config
  (evil-commentary-mode))

;; https://github.com/emacs-evil/evil-surround
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

;; (use-package evil-visualstar
;;   :ensure t
;;   (global-evil-visualstar-mode 1))

;; https://github.com/cofi/evil-indent-textobject
(use-package evil-indent-textobject)

;; https://github.com/redguardtoo/evil-matchit
(use-package evil-matchit)

(global-set-key [escape] 'evil-exit-emacs-state)

; Set cursor colors depending on mode
(when (display-graphic-p)
  (setq evil-emacs-state-cursor '("red" box)
        evil-normal-state-cursor '("green" box)
        evil-visual-state-cursor '("orange" box)
        evil-insert-state-cursor '("red" bar)
        evil-replace-state-cursor '("red" bar)
        evil-operator-state-cursor '("red" hollow)))

(progn
  (setq evil-default-state 'normal
        evil-auto-indent t
        evil-shift-width 2
        evil-search-wrap t
        evil-find-skip-newlines t
        evil-move-cursor-back nil
        evil-mode-line-format 'before
        evil-esc-delay 0.001
        evil-cross-lines t))

(setq evil-overriding-maps nil)
(setq evil-intercept-maps nil)

(evil-leader/set-leader ";")
(evil-leader/set-key
  "." 'find-tag
  "t" 'counsel-find-files
  "f" 'counsel-find-files
  "b" 'counsel-ibuffer
  "e" 'flycheck-list-errors
  "ag" 'projectile-ag
  "vs" 'split-window-right
  "hs" 'split-window-below
  "mx" 'counsel-M-x
  "p" 'counsel-yank-pop
  "oc" 'org-capture
  "ot" 'org-babel-tangle
  "q" 'evil-quit
  "g" 'magit
  "l" 'org-mac-grab-link
  )

(defun fix-underscore-word ()
  (modify-syntax-entry ?_ "w"))

;; Make ";" behave like ":" in normal mode
;; (define-key evil-normal-state-map (kbd ";") 'evil-ex)
;; (define-key evil-visual-state-map (kbd ";") 'evil-ex)
;; (define-key evil-motion-state-map (kbd ";") 'evil-ex)

#+end_src

* Packages

** [[https://github.com/myrjola/diminish.el][Diminish]]

Limit the junk on the modeline.

#+BEGIN_SRC emacs-lisp
 (use-package diminish
   :ensure t
   :demand t
   :diminish (visual-line-mode . "Ï‰")
   :diminish hs-minor-mode
   :diminish abbrev-mode
   :diminish auto-fill-function
   :diminish subword-mode)
#+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer 1
  :hook (text-mode . flyspell-mode)
  :diminish
  :bind (:map flyspell-mouse-map
              ([down-mouse-3] . #'flyspell-correct-word)
              ([mouse-3]      . #'undefined)))
#+END_SRC

** git

[[https://magit.vc/][Magit]].  One of the reasons I wanted to use emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config (setq magit-diff-refine-hunk 'all))

#+END_SRC

And of course [[https://github.com/emacs-evil/evil-magit][evil-magit]] as it's one of the few things not handled in evil-collection.

#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after evil)
#+END_SRC

Show uncommitted changes with [[https://github.com/dgutov/diff-hl][diff-hl]].  Not sure I'm sold on this yet, hence =disabled=.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :disabled
    :custom
    (diff-hl-side 'right)
    :config
    (global-diff-hl-mode 1)
    (diff-hl-margin-mode 1)
    (diff-hl-flydiff-mode 1))
#+END_SRC

** The Silver Searcher

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure    t
    :commands  (ag ag-project)
    :custom
      (ag-highlight-search t)
      (ag-highlight-search t)
      (ag-reuse-buffers t)
      (ag-reuse-window t)
    :config
    (add-to-list 'ag-arguments "--word-regexp"))
    ;; (setq ag-executable "/usr/local/bin/ag")

#+END_SRC

** [[https://github.com/justbur/emacs-which-key][Which Key]]

Shows context sensitive clues about what commands you can execute from where you are in a key sequence.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer nil
    :diminish which-key-mode
    :config
    (which-key-mode t))
#+END_SRC

** [[https://github.com/emacs-helm/helm][Helm]]

Helm is a "incremental completion and selection narrowing framework."  It can be used in all kinds of places, with fuzzy search enabled, to get things done faster.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :disabled
    :defer 1
    :diminish helm-mode
    :custom
      (helm-autoresize-max-height 0)
      (helm-autoresize-min-height 40)
      (helm-M-x-fuzzy-match t)
      (helm-buffers-fuzzy-matching t)
      (helm-recentf-fuzzy-match t)
      (helm-semantic-fuzzy-match t)
      (helm-imenu-fuzzy-match t)
      (helm-split-window-in-side-p nil)
      (helm-move-to-line-cycle-in-source nil)
      (helm-ff-search-library-in-sexp t)
      (helm-scroll-amount 8)
      (helm-echo-input-in-header-line nil)
      (helm-mode-fuzzy-match t)
      (helm-completion-in-region-fuzzy-match t)
    :init
    (helm-mode 1))
#+END_SRC

** Ivy, Swiper, Counsel, oh my

Ivy dependency.

#+BEGIN_SRC emacs-lisp
(use-package smex)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :custom
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
    :bind (("M-x" . counsel-M-x)))
    ;:chords (("yy" . counsel-yank-pop)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("M-s" . swiper)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra)
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (use-package avy)
;    :chords (("jj" . avy-goto-char-2)
;             ("jl" . avy-goto-line)))
#+END_SRC

** [[https://github.com/bbatsov/projectile][Projectile]]

Working with projects in emacs

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer 2
    :diminish projectile-mode
    :config
    ;(setq projectile-indexing-method 'git)
    (projectile-global-mode))
#+END_SRC

** Counsel Projetile

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :after (counsel projectile))
#+END_SRC

** Helm Projectile

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :disabled
    :after (helm projectile)
    :config
    (helm-projectile-on))
#+END_SRC

** Helm ag

#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :disabled
    :after (helm ag))

                                          ; not sure if I care about this yet or not
                                          ;(setq helm-ag-base-command "ag --hidden --nocolor --nogroup --ignore-case")
#+END_SRC

** Autocompletion

[[https://github.com/company-mode/company-mode][company]] stands for complete anything.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode))
#+END_SRC

** restclient

[[https://github.com/pashky/restclient.el][restclient]] is a cool mode that let's emacs do things like interact with a REST API.

#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC

** [[https://github.com/flycheck/flycheck][flycheck]]

On the fly linting.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
      :custom
      (flycheck-indication-mode nil)
      (flycheck-display-errors-delay nil)
      (flycheck-idle-change-delay 2)
      (flycheck-highlighting-mode 'lines)
      ;;   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
     :diminish
     :config
      (global-flycheck-mode)
      (use-package flycheck-pos-tip
         :config
         (flycheck-pos-tip-mode))
      (use-package helm-flycheck
         :disabled
         :after helm))
    ;; (flycheck-add-mode 'javascript-eslint 'web-mode)

    ;; Make sure eslint does not try to --print-config after each buffer opens.
    ;; Hereâ€™s a related Flycheck: https://github.com/flycheck/flycheck/issues/1129
    (with-eval-after-load 'flycheck
      (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t)))

    (custom-set-faces
     '(flycheck-error ((((class color)) (:underline "Red"))))
     '(flycheck-warning ((((class color)) (:underline "Orange")))))

    ;; ;; make sure eslint is from local project
    ;; (defun my/use-eslint-from-node-modules ()
    ;;   (let* ((root (locate-dominating-file
    ;;                 (or (buffer-file-name) default-directory)
    ;;                 "node_modules"))
    ;;          (eslint (and root
    ;;                       (expand-file-name "node_modules/eslint/bin/eslint.js"
    ;;                                         root))))
    ;;     (when (and eslint (file-executable-p eslint))
    ;;       (setq-local flycheck-javascript-eslint-executable eslint))))
    ;; (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

** [[https://github.com/Fuco1/smartparens][smartparens]]

Minor mode for Emacs that deals with parens pairs and tries to be smart about it.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :disabled
  :diminish smartparens-mode
  :custom
  (sp-base-key-bindings 'paredit)
  (sp-autoskip-closing-pair 'always)
  (sp-hybrid-kill-entire-symbol nil)
  :init
  (sp-use-paredit-bindings)
  (show-smartparens-global-mode t)
  :hook
  ('prog-mode 'smartparens-mode))
#+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Emacs rainbow delimiters mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :disabled
  :hook
  ('prog-mode 'rainbow-delimiters-mode))

#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :disabled)
#+END_SRC

** [[https://github.com/Malabarba/elisp-bug-hunter][bug hunter]]

Supposed to help you find errors in lisp, especially in =init= files by doing: =M-x bug-hunter-init-file RET e=.

#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :commands (bug-hunter-file bug-hunter-init-file))
#+END_SRC

** Unique Filenames

Make files easier to distinguish

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :defer 1
    :ensure nil
    :custom
    (uniquify-after-kill-buffer-p t)
    (uniquify-buffer-name-style 'post-forward)
    (uniquify-strip-common-suffix t))
#+END_SRC

** [[https://jblevins.org/projects/deft/][Deft]]

An emacs version of Notational Velocity.  Here mostly as I decide what to do with a load of NV notes.  Might eventually get moved into org-mode, we'll see.

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :commands (deft)
    :config
    (setq deft-extensions '("txt" "tex" "org"))
    (setq deft-use-filename-as-title t)
    (setq deft-directory "~/Dropbox/jschoolcraft/notes"))
#+END_SRC

** Editorconfig

For consistency among developers when I'm working on projects with other people.

#+BEGIN_SRC emacs-lisp
        (use-package editorconfig
          :config
          (editorconfig-mode 1))
#+END_SRC

* Languages

** markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** yaml

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** haml

#+BEGIN_SRC emacs-lisp
  (use-package haml-mode)
#+END_SRC

** ruby

#+BEGIN_SRC emacs-lisp
    (use-package ruby-mode
      :mode (
             "Berksfile\\'"
             "Capfile\\'"
             "Fastfile\\'"
             "Gemfile\\'"
             "Guardfile\\'"
             "Matchfile\\'"
             "Rakefile\\'"
             "Thorfile\\'"
             "Vagrantfile\\'"
             "\\.cap\\'"
             "\\.gemspec\\'"
             "\\.jbuilder\\'"
             "\\.rabl\\'"
             "\\.rake\\'"
             "\\.rb\\'"
             "\\.ru\\'"
             "\\.thor\\'"
             )
      :init
      (setq ruby-indent-level 2
            ruby-indent-tabs-mode nil)
      (add-hook 'ruby-mode 'superword-mode))
#+END_SRC

[[https://github.com/rejeep/ruby-tools.el][ruby-tools]] Collection of handy functions for Emacs ruby-mode

#+BEGIN_SRC emacs-lisp
(use-package ruby-tools
  :diminish ""
  :hook
  ('ruby-mode 'ruby-tools-mode)
  :config
  (ruby-tools-mode t))

#+END_SRC

[[https://github.com/senny/rbenv.el][rbenv]] use rbenv to manage your Ruby versions within Emacs

#+BEGIN_SRC emacs-lisp
(use-package rbenv
  :disabled
  :defer 25
  :init
  (setq rbenv-show-active-ruby-in-modeline nil)
  :config
  (global-rbenv-mode t))

#+END_SRC

** javascript

Trying to get emacs to be a decent editor for React Native projects.  Still have a ways to go and some things to look at, including:

- https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html
- https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html

[[https://github.com/joshwnj/json-mode][json-mode]] Major mode for editing JSON files with emacs

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

[[https://github.com/mooz/js2-mode][js2-mode]] Improved JavaScript editing mode

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :hook
  ('js2-mode 'js2-imenu-extras-mode)
  :config
  (setq-default js-indent-level 2)
  (setq-default js-auto-indent-flag nil))
#+END_SRC

Here's some stuff I've just copied from https://github.com/chief/.emacs.d/ that I'm stashing here as a placeholder to look at in the future.

[[https://github.com/skeeto/skewer-mode][skewer-mode]] Provides live interaction with JavaScript, CSS, and HTML in a web browser. Expressions are sent on-the-fly from an editing buffer to be evaluated in the browser, just like Emacs does with an inferior Lisp process in Lisp modes.

#+BEGIN_SRC emacs-lisp
(use-package skewer-mode
  :disabled
  :hook
  ('js2-mode 'skewer-mode))
#+END_SRC

[[https://github.com/magnars/js2-refactor.el][js2-refactor]] A JavaScript refactoring library for emacs

#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
  :disabled
  :init
  (add-hook 'js2-mode-hook 'js2-refactor-mode)
  :bind (:map js2-mode-map
              ("C-k" . js2r-kill))
  )
#+END_SRC

[[https://github.com/proofit404/company-tern][company-tern]] a Tern backend for company-mode

#+BEGIN_SRC emacs-lisp
(use-package company-tern
  :disabled
  :init
  ;; (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook (lambda () (tern-mode)))

  :config
  ;; Disable completion keybindings, as we use xref-js2 instead
  (define-key tern-mode-keymap (kbd "M-.") nil)
  (define-key tern-mode-keymap (kbd "M-,") nil)
  )
#+END_SRC

[[https://indium.readthedocs.io/en/latest/setup.html][indium]] A JavaScript development environment for Emacs

#+BEGIN_SRC emacs-lisp
(use-package indium
  :disabled
  :hook
  ('js-mode 'indium-interaction-mode))
#+END_SRC

[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]] Emacs major modes for various Git configuration files

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :disabled
  :mode "\\.jsx\\'"
  :config
  (add-to-list 'auto-mode-alist '("components\\/.*\\.jsx\\'" . rjsx-mode)))
#+END_SRC

** Web Mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :init
      (setq web-mode-content-types-alist '(("jsx" . "\\.tsx\\'")))
      (setq web-mode-content-types-alist '(("jsx" . "\\.js\\'")))
    :config
      (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode)))
#+END_SRC

* Org

Org is one of the reasons I keep coming back to emacs.

Lot's of places to find inspiration for orgmode config, but here are a few that I've probably stolen stuff from:

- http://mph.puddingbowl.org/2014/12/org-mode-face-lift/
- https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d#org-mode-settings

#+begin_src emacs-lisp
  (use-package org
    :pin "gnu"
    :custom
    (org-src-fontify-natively  t)
    (org-src-tab-acts-natively t)

                                          ; directories
    (org-directory "~/Dropbox/org")
    (org-default-notes-file (concat org-directory "/notes.org"))


    ;; refiling
    ;; all of this stolen from https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
    ;; look at this https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/
    (org-refile-targets '((org-agenda-files :maxlevel . 4)))
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)

    (org-log-done t)
    :config
    (progn

      ;; highlight code blocks syntax

                                          ; set the modules enabled by default
      (setq org-modules '(
                          org-bbdb
                          org-bibtex
                          org-docview
                          org-mhe
                          org-rmail
                          org-crypt
                          org-protocol
                          org-gnus
                          org-id
                          org-info
                          org-habit
                          org-irc
                          org-annotate-file
                          org-eval
                          org-expiry
                          org-man
                          org-panel
                          org-toc))



      ;; capture templates
      (setq org-capture-templates
            '(
              ("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
               "* TODO %?\n  %i\n  %a")
              ("r" "TODO" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
               "* TODO %^{Task}  %^G\n   %?\n  %a")
              ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
               "* %?\nEntered on %U\n  %i\n  %a")
              ("m" "Meeting")
              ("mb" "Bibleschools" entry (file+datetree "~/Dropbox/org/clients/BibleSchools.org")
               "* %?\nEntered on %U\n  %i\n")
              ("mn" "NADE" entry (file+datetree "~/Dropbox/org/clients/NADE.org")
               "* %?\nEntered on %U\n  %i\n")
              ("mr" "Roth" entry (file+datetree "~/Dropbox/org/clients/Roth.org")
               "* %?\nEntered on %U\n  %i\n")
              ("ms" "SkillScout" entry (file+datetree "~/Dropbox/org/clients/SkillScout.org")
               "* %?\nEntered on %U\n  %i\n")
              ("mw" "SZW" entry (file+datetree "~/Dropbox/org/clients/Subzero.org")
               "* %?\nEntered on %U\n  %i\n")
              ("i" "Inbox" entry (file+datetree "~/Dropbox/org/inbox.org")
               "* %?\nEntered on %U\n  %i\n  %a")
              ("I" "Read Later" entry (file+datetree "~/Dropbox/org/inbox.org")
               "* %?\n  %i\n %c\n")
              ("n" "Notes" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
               "* %^{Header}  %^G\n  %U\n\n  %?")
              ("l" "Link" entry (file+headline "~/Dropbox/org/links.org" "Links")
               "* %? %^L %^g \n%T" :prepend t)
              ))

      ;; tasks management
      ;; (setq org-clock-idle-time nil)

      ;; agenda & diary
      (setq org-agenda-include-diary t)
      (setq org-agenda-files '("~/Dropbox/org/"
                               "~/Dropbox/org/personal.org"
                               "~/Dropbox/org/technical.org"
                               "~/Dropbox/org/project.org"
                               "~/Dropbox/org/clients/"))
      (setq org-agenda-inhibit-startup t)

      ;; show images inline
      ;; only works in GUI, but is a nice feature to have
      (when (window-system)
        (setq org-startup-with-inline-images t))
      ;; limit images width
      (setq org-image-actual-width '(800))

      ;; Some initial langauges we want org-babel to support
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((js     . t)
                                     (python . t)
                                     (ruby   . t)
                                     (dot    . t)
                                     (org . t)
                                     (sqlite . t)
                                     (perl   . t)))

      ;; easy elisp source blocks
      (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp :tangle yes?\n\n#+END_SRC"))
      ;; refresh images after execution
      (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
      (add-hook 'after-save-hook 'org-babel-tangle
                'run-at-end
                'only-in-org-mode)
      )
    )

                                          ;(use-package org-mac-link
                                          ;  :disabled)

                                          ;(setq org-ellipsis "â¤µ")
(use-package org-bullets
  :after org
  :hook (org-mode . (lambda () (org-bullets-mode 1)))
  :config
  (setq org-bullets-bullet-list '("â—‰" "âš«")))

  '(org-agenda-date ((t (:inherit org-agenda-structure :weight semi-bold :height 1.2))) t)
  '(org-date ((t (:foreground "Purple" :underline t :height 0.8 :family "Helvetica Neue"))))
  '(org-done ((t (:foreground "gray57" :weight light))))
  '(org-level-1 ((t (:weight semi-bold :height 1.1 :family "Helvetica Neue"))))
  '(org-level-2 ((t (:inherit outline-2 :weight semi-bold :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :weight bold :family "Helvetica Neue"))))
  '(org-level-5 ((t (:inherit outline-5 :family "Helvetica Neue"))))
  '(org-link ((t (:inherit link :weight normal))))
  '(org-meta-line ((t (:inherit font-lock-comment-face :height 0.8))))
  '(org-property-value ((t (:height 0.9 :family "Helvetica Neue"))) t)
  '(org-special-keyword ((t (:inherit font-lock-keyword-face :height 0.8 :family "Helvetica Neue"))))
  '(org-table ((t (:foreground "dim gray" :height 0.9 :family "Menlo"))))
  '(org-tag ((t (:foreground "dark gray" :weight bold :height 0.8))))
  '(org-todo ((t (:foreground "#e67e22" :weight bold))))

  (require 'org-install)
  (require 'ob-tangle)

  ;; should be able to use this, according to:
  ;; https://github.com/heikkil/emacs-literal-config/blob/master/emacs.org#url-copying
  ;; https://orgmode.org/worg/org-contrib/org-mac-link.html
  ;; (use-package org-mac-link
  ;;   :ensure t
  ;;   :if (eq system-type 'darwin)
  ;;   :bind ("C-c v" . my/quick-url-note)
  ;;   :config
  ;;   (defun my/quick-url-note ()
  ;;     "Fastest way to capture a web page link"
  ;;     (interactive)
  ;;     (org-capture nil "n")
  ;;     (org-mac-chrome-insert-frontmost-url)
  ;;     (org-capture-finalize)))

  ;; todo states
  ;; https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/
  ;; you can add UTF-8 bits to sequence keywords, something like:
  ;; (setq org-todo-keywords '((sequence "â˜› TODO(t)" "|" "<img draggable="false" class="emoji" alt="âœ”" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/2714.svg"> DONE(d)")
  ;;                           (sequence "âš‘ WAITING(w)" "|")
  ;;                           (sequence "|" "âœ˜ CANCELED(c)")))

  ;; todo state triggers
  ;; automatically do things based on todo state
  ;; http://doc.norang.ca/org-mode.html#ToDoStateTriggers

  ;; just evaluate, don't ask me
  (setq org-confirm-babel-evaluate nil)

  ;; syntax highlighting code blocks
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)



    ;;; this is here for the alfred workflow
  ;;   all of this was stolen from:
  ;;   https://github.com/jjasghar/alfred-org-capture/blob/master/el/alfred-org-capture.el
  ;; for this to work the server has to be started: M-x start-server
  (defun make-orgcapture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "remember") (width . 80) (height . 16)
                  (top . 400) (left . 300)
                  (font . "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                  ))
    (select-frame-by-name "remember")
    (org-capture))

#+end_src

#+BEGIN_SRC emacs-lisp
  ;; evil keys
  (use-package evil-org
    :ensure t
    :after (evil org)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (evil-leader/set-key-for-mode 'org-mode
      "." 'hydra-org-state/body
      "r" 'org-refile
      "s" 'org-schedule
      "d" 'org-deadline
      "t" 'org-todo
      "T" 'org-show-todo-tree
      "v" 'org-mark-element
      "a" 'org-agenda
      "c" 'org-archive-subtree
      "l" 'evil-org-open-links
      "C" 'org-resolve-clocks))
#+END_SRC

This snippet makes literate programming a lot easier, as it tangles on save (another gem from [[https://github.com/zzamboni/dot-emacs/blob/master/init.org][zzamboni]])

#+BEGIN_SRC emacs-lisp
;(org-mode . (lambda () (add-hook 'after-save-hook 'org-babel-tangle
                                 ;'run-at-end 'only-in-org-mode)))
#+END_SRC

Use Twitter Bootstrap when exporting

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :ensure t)
#+END_SRC


* Appearance

** Theme

I'll occassionally try out other themes but I seem to always return to irblack.

#+BEGIN_SRC emacs-lisp
  ; (use-package moe-theme)
  ; (use-package alect-themes)
  ; (use-package molokai-theme)
  ; (use-package apropospriate-theme)
  ; (use-package color-theme-sanityinc-solarized)
  ; (use-package dracula-theme)
  ; (use-package atom-one-dark-theme)

  (use-package base16-theme
    :disabled
    :config
    (load-theme 'base16-irblack t))

  (use-package doom-themes
    :custom
      (doom-themes-enabled-bold t)
      (doom-themes-enabled-italic t)
    :config
      (load-theme 'doom-one t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

#+END_SRC

** Windows

Setting the size of created windows.  This might exist somewhere else, but this is how I do it.

The initial window

#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist
      '((width . 102)   ; characters in a line
        (height . 54))) ; number of lines

;; sebsequent frame
(setq default-frame-alist
      '((width . 100)   ; characters in a line
        (height . 52))) ; number of lines

#+END_SRC

Subsequent windows

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((width . 100)   ; characters in a line
        (height . 52))) ; number of lines

#+END_SRC

Getting rid of all the window chrome/treatments/bars/etc.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline)
(use-package powerline-evil)
#+END_SRC

** Everything else

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :custom
    (golden-ratio-adjust-factor .8)
    (golden-ratio-wide-adjust-factor .8)
    :config
    (golden-ratio-mode 1))
#+END_SRC

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Monaco 18")

(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message ""
      visible-bell t)

;; replace yes/no questions with y/n
(fset 'yes-or-no-p 'y-or-n-p)
;; show the empty lines at the end (bottom) of the buffer
(toggle-indicate-empty-lines)
;; delete the previous selection when overrides it with a new insertion.
(delete-selection-mode)
;; the blinking cursor is pretty annoying, so disable it.
(blink-cursor-mode -1)
;; more thinner window divisions
(fringe-mode '(1 . 1))

;; show matching parenthesis
(setq show-paren-delay 0)
(show-paren-mode t)

(global-visual-line-mode nil)
(setq-default indent-tabs-mode nil)
(eval-after-load "vc" '(setq vc-handled-backends nil))
(setq vc-follow-symlinks t
      large-file-warning-threshold nil
      split-width-threshold nil)

;; display line numbers
(global-linum-mode 1)
;; highlight the current line
;(global-hl-line-mode 1)

;; settings for the mode line
(column-number-mode t)
(setq size-indication-mode t)
(which-function-mode 1)
(line-number-mode 1)

(use-package linum-relative
  :hook
  (after-init . linum-relative-on))

#+end_src
