
;; DO NOT EDIT THIS FILE DIRECTLY
;; This file is programmatically generated from the corresponding .org file in this directory
;; You should make any changes there and regenerate it from Emacs org-mode using org-babel-tangle

(setq user-full-name "Jeff Schoolcraft")
(setq user-mail-address "jschoolcraft@aissaclabs.com")

(setq gc-cons-threshold (* 512 1024 1024))
(setq gnutls-min-prime-bits 4096)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu"       . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("mela-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(customize-set-variable 'use-package-always-ensure t)

(customize-set-variable 'use-package-always-defer t)

(customize-set-variable 'load-prefer-newer t)

(use-package auto-compile
  :defer nil
  :config (auto-compile-on-load-mode))

;; UTF-8
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-language-environment    'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(prefer-coding-system        'utf-8)
(setq-default buffer-file-coding-system 'utf-8-auto-unix)
(set-input-method nil)

(setq echo-keystrokes 0.25) ;display unfinished keystroke more quickly (defaults 1 second)

(use-package evil
  :defer nil
  :init
  (setq evil-want-integration nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :custom (evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))

(use-package evil-escape
  :after evil
  :config
    (evil-escape-mode t))

;; the basics

;; loads of stuff
;;

;; magit
;; https://github.com/emacs-evil/evil-magit
(use-package evil-magit
  :after evil)

;; https://github.com/cofi/evil-leader
;; alternative using hydra: https://github.com/noctuid/evil-guide/wiki#using-hydra-for-leader-key
(use-package evil-leader
  :defer nil
  :config
  (global-evil-leader-mode))

;; https://github.com/linktohack/evil-commentary
(use-package evil-commentary
  :config
  (evil-commentary-mode))

;; https://github.com/emacs-evil/evil-surround
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

;; (use-package evil-visualstar
;;   :ensure t
;;   (global-evil-visualstar-mode 1))

;; https://github.com/cofi/evil-indent-textobject
(use-package evil-indent-textobject)

;; https://github.com/redguardtoo/evil-matchit
(use-package evil-matchit)

(global-set-key [escape] 'evil-exit-emacs-state)

; Set cursor colors depending on mode
(when (display-graphic-p)
  (setq evil-emacs-state-cursor '("red" box)
        evil-normal-state-cursor '("green" box)
        evil-visual-state-cursor '("orange" box)
        evil-insert-state-cursor '("red" bar)
        evil-replace-state-cursor '("red" bar)
        evil-operator-state-cursor '("red" hollow)))

(progn
  (setq evil-default-state 'normal
        evil-auto-indent t
        evil-shift-width 2
        evil-search-wrap t
        evil-find-skip-newlines t
        evil-move-cursor-back nil
        evil-mode-line-format 'before
        evil-esc-delay 0.001
        evil-cross-lines t))

(setq evil-overriding-maps nil)
(setq evil-intercept-maps nil)

;; swap 0 and ^ so 0 goes back to first non-whitespace character
;(define-key evil-motion-state-map (kbd "0") 'evil-first-non-blank)
;(define-key evil-motion-state-map (kbd "^") 'evil-beginning-of-line)

(evil-leader/set-leader ";")
(evil-leader/set-key
  "." 'find-tag
  "t" 'helm-find-files
  "f" 'helm-find-files
  "b" 'helm-mini
  "e" 'flycheck-list-errors
  "ag" 'projectile-ag
  "vs" 'split-window-right
  "hs" 'split-window-below
  "mx" 'helm-M-x
  "p" 'helm-show-kill-ring
  "oc" 'org-capture
  "ot" 'org-babel-tangle
  "q" 'evil-quit
  "g" 'magit
  "l" 'org-mac-grab-link
  )

(defun fix-underscore-word ()
  (modify-syntax-entry ?_ "w"))

;; Make ";" behave like ":" in normal mode
;; (define-key evil-normal-state-map (kbd ";") 'evil-ex)
;; (define-key evil-visual-state-map (kbd ";") 'evil-ex)
;; (define-key evil-motion-state-map (kbd ";") 'evil-ex)

;; moving around windows
(eval-after-load "evil"
  '(progn
     (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
     (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
     (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
     (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)))

(use-package diminish
      :ensure t
      :demand t
      :diminish (visual-line-mode . "ω")
      :diminish hs-minor-mode
      :diminish abbrev-mode
      :diminish auto-fill-function
      :diminish subword-mode)

    (use-package ag
      :ensure    t
      :commands  (ag ag-project)
      :init      (setq ag-highlight-search t)
      :config
      (add-to-list 'ag-arguments "--word-regexp")
      ;; (setq ag-executable "/usr/local/bin/ag")
      (setq ag-highlight-search t)
      (setq ag-reuse-buffers t)
      (setq ag-reuse-window t))

    ;; helm & projectile
; stolen straight from https://github.com/zzamboni/dot-emacs/blob/master/init.org
  (use-package helm
    :disabled
    :defer 1
    :diminish helm-mode
    :bind
    (("C-x C-f"       . helm-find-files)
     ("C-x C-b"       . helm-buffers-list)
     ("C-x b"         . helm-multi-files)
     ("M-x"           . helm-M-x)
     :map helm-find-files-map
     ("C-<backspace>" . helm-find-files-up-one-level)
     ("C-f"           . helm-execute-persistent-action)
     ([tab]           . helm-ff-RET))
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-echo-input-in-header-line nil)
    :init
    (helm-mode 1))

    ; globally enable fuzzy matching in helm
    ; (customize-set-variable 'helm-mode-fuzzy-match t)
    ; (customize-set-variable 'helm-completion-in-region-fuzzy-match t)

    (use-package projectile
      :defer 2
      :diminish projectile-mode
      :config
      ;(setq projectile-indexing-method 'git)
      (projectile-global-mode))

;    (use-package helm-projectile)
;    (use-package helm-ag)

    ;; auto-completion
    (use-package company
      :diminish company-mode
      :hook
      (after-init . global-company-mode))

    (use-package highlight-symbol
      :diminish ""
      :config
      (setq-default highlight-symbol-idle-delay 1.5))

    (setq helm-ag-base-command "ag --hidden --nocolor --nogroup --ignore-case")
    ; (helm-projectile-on)

    ;; flycheck
    (use-package flycheck
      :init
      (setq flycheck-indication-mode nil)
      (setq flycheck-display-errors-delay nil)
      (setq flycheck-idle-change-delay 2)
      (setq flycheck-highlighting-mode 'lines)
      ;;   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
      (global-flycheck-mode))
    ;; (flycheck-add-mode 'javascript-eslint 'web-mode)

    ;; Make sure eslint does not try to --print-config after each buffer opens.
    ;; Here’s a related Flycheck: https://github.com/flycheck/flycheck/issues/1129
    (with-eval-after-load 'flycheck
      (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t)))

    (custom-set-faces
     '(flycheck-error ((((class color)) (:underline "Red"))))
     '(flycheck-warning ((((class color)) (:underline "Orange")))))

    ;; ;; make sure eslint is from local project
    ;; (defun my/use-eslint-from-node-modules ()
    ;;   (let* ((root (locate-dominating-file
    ;;                 (or (buffer-file-name) default-directory)
    ;;                 "node_modules"))
    ;;          (eslint (and root
    ;;                       (expand-file-name "node_modules/eslint/bin/eslint.js"
    ;;                                         root))))
    ;;     (when (and eslint (file-executable-p eslint))
    ;;       (setq-local flycheck-javascript-eslint-executable eslint))))
    ;; (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

    ;; no idea
    ;;(use-package yasnippet
    ;;  :init
    ;;  (yas-global-mode 1)
    ;;  :config
    ;;  (yas-reload-all)
    ;;  (setq yas-snippet-dirs '("~/.emacs.d/snippets"
    ;;                           "~/.emacs.d/remote-snippets"))
    ;;  (setq yas-indent-line nil)
    ;;  (setq tab-always-indent 'complete)
    ;;  (setq yas-prompt-functions '(yas-completing-prompt
    ;;                               yas-ido-prompt
    ;;                               yas-dropdown-prompt))
    ;;  (define-key yas-minor-mode-map (kbd "<escape>") 'yas-exit-snippet))

    ;(use-package yasnippet)

    ;; git related stuffs
    (use-package magit
      :ensure t
      :config (setq magit-diff-refine-hunk 'all))

    (use-package diff-hl
      :disabled
      :init
      (setq diff-hl-side 'right))

    ;(global-diff-hl-mode 1)
    ;(diff-hl-margin-mode 1)
    ;(diff-hl-flydiff-mode 1)

    (use-package which-key
      :defer nil
      :diminish which-key-mode
      :config
      (which-key-mode t))

    (use-package restclient)

    (use-package markdown-mode
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package yaml-mode)
    (use-package haml-mode)

    (use-package ruby-mode
      :mode "\\.rb\\'"
      :mode "Rakefile\\'"
      :mode "Fastfile\\'"
      :mode "Matchfile\\'"
      :mode "Gemfile\\'"
      :mode "Berksfile\\'"
      :mode "Vagrantfile\\'"
      :interpreter "ruby"

      :init
      (setq ruby-indent-level 2
            ruby-indent-tabs-mode nil)
      (add-hook 'ruby-mode 'superword-mode))

    ;(use-package web-mode
    ;  :init
    ;    (setq web-mode-content-types-alist '(("jsx" . "\\.tsx\\'")))
    ;    (setq web-mode-content-types-alist '(("jsx" . "\\.js\\'")))
    ;  :config
    ;    (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
    ;    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    ;    (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
    ;    (add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode)))

    ;(use-package web-mode
    ;  :config
    ;  (setq web-mode-attr-indent-offset 2)
    ;  (setq web-mode-code-indent-offset 2)
    ;  (setq web-mode-css-indent-offset 2)
    ;  (setq web-mode-indent-style 2)
    ;  (setq web-mode-markup-indent-offset 2)
    ;  (setq web-mode-sql-indent-offset 2))
    ;; (use-package add-node-modules-path
    ;;   :ensure t)

    (eval-after-load 'web-mode
        '(progn
           (add-hook 'web-mode-hook #'add-node-modules-path)
           (add-hook 'web-mode-hook #'prettier-js-mode)))

    ;; helps find the source of an error
    (use-package bug-hunter
      :commands (bug-hunter-file bug-hunter-init-file))

    ;; deft
    (use-package deft
      :commands (deft)
      :config
      (setq deft-extensions '("txt" "tex" "org"))
      (setq deft-use-filename-as-title t)
      (setq deft-directory "~/Dropbox/jschoolcraft/notes"))


    ;; editorconfig
    ;; for consistency among developers on a project
    (use-package editorconfig
      :config
      (editorconfig-mode 1))

    (add-to-list 'load-path (expand-file-name "lib" user-emacs-directory))

    (defconst user-init-dir
              (cond ((boundp 'user-emacs-directory)
                     user-emacs-directory)
                    ((boundp 'user-init-directory)
                     user-init-directory)
                    (t "~/.emacs.d/")))


    ;; system clipboard
    (setq select-enable-clipboard t)

    ; Make files easier to distinguish
    (use-package uniquify
      :defer 1
      :ensure nil
      :custom
      (uniquify-after-kill-buffer-p t)
      (uniquify-buffer-name-style 'post-forward)
      (uniquify-strip-common-suffix t))

    ; Kill backups
    (setq auto-save-default nil
          auto-save-list-file-prefix nil
          make-backup-files nil)

    ; Hate whitespace
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; electric-pair-mode
    ;; smartish parens/pairs stuff
    (electric-pair-mode)

    ;; put that custom bullshit somewhere else
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file 'noerror)

    (put 'narrow-to-page 'disabled nil)
    (put 'narrow-to-region 'disabled nil)

; stolen from: http://mph.puddingbowl.org/2014/12/org-mode-face-lift/
; https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d#org-mode-settings

;;; Code:
(use-package org
  :pin "gnu"
  :config
  ; (progn

  ;   ;; highlight code blocks syntax
  ;   (setq org-src-fontify-natively  t
  ;         org-src-tab-acts-natively t)

  ;   ; set the modules enabled by default
  ;   (setq org-modules '(
  ;                       org-bbdb
  ;                       org-bibtex
  ;                       org-docview
  ;                       org-mhe
  ;                       org-rmail
  ;                       org-crypt
  ;                       org-protocol
  ;                       org-gnus
  ;                       org-id
  ;                       org-info
  ;                       org-habit
  ;                       org-irc
  ;                       org-annotate-file
  ;                       org-eval
  ;                       org-expiry
  ;                       org-man
  ;                       org-panel
  ;                       org-toc))

  ;   ;; set default directories
  ;   (setq org-directory "~/Dropbox/org"
  ;         org-default-notes-file (concat org-directory "/notes.org"))

  ;   ;; refiling
  ;   ;; all of this stolen from https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  ;   ;; look at this https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/
  ;   (setq org-refile-targets '((org-agenda-files :maxlevel . 4))
  ;         org-refile-use-outline-path 'file
  ;         org-outline-path-complete-in-steps nil
  ;         org-refile-allow-creating-parent-nodes 'confirm)


  ;   ;; capture templates
  ;   (setq org-capture-templates
  ;         '(
  ;           ("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
  ;            "* TODO %?\n  %i\n  %a")
  ;           ("r" "TODO" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
  ;            "* TODO %^{Task}  %^G\n   %?\n  %a")
  ;           ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
  ;            "* %?\nEntered on %U\n  %i\n  %a")
  ;           ("m" "Meeting")
  ;           ("mb" "Bibleschools" entry (file+datetree "~/Dropbox/org/clients/BibleSchools.org")
  ;            "* %?\nEntered on %U\n  %i\n")
  ;           ("mn" "NADE" entry (file+datetree "~/Dropbox/org/clients/NADE.org")
  ;            "* %?\nEntered on %U\n  %i\n")
  ;           ("mr" "Roth" entry (file+datetree "~/Dropbox/org/clients/Roth.org")
  ;            "* %?\nEntered on %U\n  %i\n")
  ;           ("ms" "SkillScout" entry (file+datetree "~/Dropbox/org/clients/SkillScout.org")
  ;            "* %?\nEntered on %U\n  %i\n")
  ;           ("mw" "SZW" entry (file+datetree "~/Dropbox/org/clients/Subzero.org")
  ;            "* %?\nEntered on %U\n  %i\n")
  ;           ("i" "Inbox" entry (file+datetree "~/Dropbox/org/inbox.org")
  ;            "* %?\nEntered on %U\n  %i\n  %a")
  ;           ("I" "Read Later" entry (file+datetree "~/Dropbox/org/inbox.org")
  ;            "* %?\n  %i\n %c\n")
  ;           ("n" "Notes" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
  ;            "* %^{Header}  %^G\n  %U\n\n  %?")
  ;           ("l" "Link" entry (file+headline "~/Dropbox/org/links.org" "Links")
  ;            "* %? %^L %^g \n%T" :prepend t)
  ;           ))

  ;   ;; tasks management
  ;   (setq org-log-done t)
  ;   ;; (setq org-clock-idle-time nil)

  ;   ;; agenda & diary
  ;   (setq org-agenda-include-diary t)
  ;   (setq org-agenda-files '("~/Dropbox/org/"
  ;                            "~/Dropbox/org/personal.org"
  ;                            "~/Dropbox/org/technical.org"
  ;                            "~/Dropbox/org/project.org"
  ;                            "~/Dropbox/org/clients/"))
  ;   (setq org-agenda-inhibit-startup t)

  ;   ;; show images inline
  ;   ;; only works in GUI, but is a nice feature to have
  ;   (when (window-system)
  ;     (setq org-startup-with-inline-images t))
  ;   ;; limit images width
  ;   (setq org-image-actual-width '(800))

  ;   ;; Some initial langauges we want org-babel to support
  ;   (org-babel-do-load-languages 'org-babel-load-languages
  ;                                '((shell     . t)
  ;                                  (js     . t)
  ;                                  (python . t)
  ;                                  (ruby   . t)
  ;                                  (dot    . t)
  ;                                  (org . t)
  ;                                  (sqlite . t)
  ;                                  (perl   . t)))

  ;   ;; refresh images after execution
  ;   (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  ;   )
  )

;(use-package org-mac-link
;  :disabled)

(setq org-ellipsis "⤵")
(use-package org-bullets
  :config
  (progn
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))

'(org-agenda-date ((t (:inherit org-agenda-structure :weight semi-bold :height 1.2))) t)
'(org-date ((t (:foreground "Purple" :underline t :height 0.8 :family "Helvetica Neue"))))
'(org-done ((t (:foreground "gray57" :weight light))))
'(org-level-1 ((t (:weight semi-bold :height 1.1 :family "Helvetica Neue"))))
'(org-level-2 ((t (:inherit outline-2 :weight semi-bold :height 1.1))))
'(org-level-3 ((t (:inherit outline-3 :weight bold :family "Helvetica Neue"))))
'(org-level-5 ((t (:inherit outline-5 :family "Helvetica Neue"))))
'(org-link ((t (:inherit link :weight normal))))
'(org-meta-line ((t (:inherit font-lock-comment-face :height 0.8))))
'(org-property-value ((t (:height 0.9 :family "Helvetica Neue"))) t)
'(org-special-keyword ((t (:inherit font-lock-keyword-face :height 0.8 :family "Helvetica Neue"))))
'(org-table ((t (:foreground "dim gray" :height 0.9 :family "Menlo"))))
'(org-tag ((t (:foreground "dark gray" :weight bold :height 0.8))))
'(org-todo ((t (:foreground "#e67e22" :weight bold))))

(require 'org-install)
(require 'ob-tangle)

;; should be able to use this, according to:
;; https://github.com/heikkil/emacs-literal-config/blob/master/emacs.org#url-copying
;; https://orgmode.org/worg/org-contrib/org-mac-link.html
;; (use-package org-mac-link
;;   :ensure t
;;   :if (eq system-type 'darwin)
;;   :bind ("C-c v" . my/quick-url-note)
;;   :config
;;   (defun my/quick-url-note ()
;;     "Fastest way to capture a web page link"
;;     (interactive)
;;     (org-capture nil "n")
;;     (org-mac-chrome-insert-frontmost-url)
;;     (org-capture-finalize)))

;; https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/
;; you can add UTF-8 bits to sequence keywords, something like:
;; (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "<img draggable="false" class="emoji" alt="✔" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/2714.svg"> DONE(d)")
;;                           (sequence "⚑ WAITING(w)" "|")
;;                           (sequence "|" "✘ CANCELED(c)")))

;; just evaluate, don't ask me
(setq org-confirm-babel-evaluate nil)

;; syntax highlighting code blocks
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)

;; evil keys
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
   (evil-leader/set-key-for-mode 'org-mode
     "." 'hydra-org-state/body
     "r" 'org-refile
     "s" 'org-schedule
     "d" 'org-deadline
     "t" 'org-todo
     "T" 'org-show-todo-tree
     "v" 'org-mark-element
     "a" 'org-agenda
     "c" 'org-archive-subtree
     "l" 'evil-org-open-links
     "C" 'org-resolve-clocks))

;; Define a transient state for quick navigation
; (defhydra hydra-org-state ()
;   ;; basic navigation
;   ("i" org-cycle)
;   ("I" org-shifttab)
;   ("h" org-up-element)
;   ("l" org-down-element)
;   ("j" org-forward-element)
;   ("k" org-backward-element)
;   ;; navigating links
;   ("n" org-next-link)
;   ("p" org-previous-link)
;   ("o" org-open-at-point)
;   ;; navigation blocks
;   ("N" org-next-block)
;   ("P" org-previous-block)
;   ;; updates
;   ("." org-ctrl-c-ctrl-c)
;   ("*" org-ctrl-c-star)
;   ("-" org-ctrl-c-minus)
;   ;; change todo state
;   ("H" org-shiftleft)
;   ("L" org-shiftright)
;   ("J" org-shiftdown)
;   ("K" org-shiftup)
;   ("t" org-todo))

;; exporting
; (use-package ox-html
;   :init
;   (setq org-html-postamble nil)
;   (setq org-export-with-section-numbers nil)
;   (setq org-export-with-toc nil)
;   (setq org-html-head-extra "
;      <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
;      <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,700' rel='stylesheet' type='text/css'>
;      <style type='text/css'>
;         body {
;            font-family: 'Source Sans Pro', sans-serif;
;         }
;         pre, code {
;            font-family: 'Source Code Pro', monospace;
;         }
;      </style>"))

;;; this is here for the alfred workflow
;;   all of this was stolen from:
;;   https://github.com/jjasghar/alfred-org-capture/blob/master/el/alfred-org-capture.el
;; for this to work the server has to be started: M-x start-server
(defun make-orgcapture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "remember") (width . 80) (height . 16)
                (top . 400) (left . 300)
                (font . "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                ))
  (select-frame-by-name "remember")
  (org-capture))

;(org-mode . (lambda () (add-hook 'after-save-hook 'org-babel-tangle
                                 ;'run-at-end 'only-in-org-mode)))

(use-package ox-twbs
  :ensure t)

; (use-package moe-theme)
; (use-package alect-themes)
; (use-package molokai-theme)
; (use-package apropospriate-theme)
; (use-package color-theme-sanityinc-solarized)
; (use-package dracula-theme)
; (use-package atom-one-dark-theme)

(use-package base16-theme
  :disabled
  :config
  (load-theme 'base16-irblack t))

(use-package doom-themes
  :custom
    (doom-themes-enabled-bold t)
    (doom-themes-enabled-italic t)
  :config
    (load-theme 'doom-one t))

(setq initial-frame-alist
      '((width . 102)   ; characters in a line
        (height . 54))) ; number of lines

;; sebsequent frame
(setq default-frame-alist
      '((width . 100)   ; characters in a line
        (height . 52))) ; number of lines

(setq default-frame-alist
      '((width . 100)   ; characters in a line
        (height . 52))) ; number of lines

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(set-face-attribute 'default nil :font "Monaco 18")

(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message ""
      visible-bell t)

;; replace yes/no questions with y/n
(fset 'yes-or-no-p 'y-or-n-p)
;; show the empty lines at the end (bottom) of the buffer
(toggle-indicate-empty-lines)
;; delete the previous selection when overrides it with a new insertion.
(delete-selection-mode)
;; the blinking cursor is pretty annoying, so disable it.
(blink-cursor-mode -1)
;; more thinner window divisions
(fringe-mode '(1 . 1))

;; show matching parenthesis
(setq show-paren-delay 0)
(show-paren-mode t)

(global-visual-line-mode nil)
(setq-default indent-tabs-mode nil)
(eval-after-load "vc" '(setq vc-handled-backends nil))
(setq vc-follow-symlinks t
      large-file-warning-threshold nil
      split-width-threshold nil)

;; display line numbers
(global-linum-mode 1)
;; highlight the current line
;(global-hl-line-mode 1)

;; settings for the mode line
(column-number-mode t)
(setq size-indication-mode t)
(which-function-mode 1)
(line-number-mode 1)

(use-package linum-relative
  :hook
  (after-init . linum-relative-on))
