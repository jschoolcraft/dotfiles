#!/usr/bin/env zsh

# Simple worktree creation script
# Usage: wt <branch-name> [base-branch]

# Script version
VERSION="1.1.0"

# Default values
DEFAULT_BASE_BRANCH="main"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Function to show usage
show_usage() {
    cat << EOF
wt - Simple worktree creation tool v${VERSION}

Usage: wt <branch-name> [base-branch]

Arguments:
    branch-name         Name of the branch/worktree to create
    base-branch         Base branch to create from (default: ${DEFAULT_BASE_BRANCH})

Options:
    --no-copy           Don't copy any files to the worktree
    --no-cursor         Don't open in Cursor editor
    -h, --help          Show this help message
    -v, --version       Show version

Examples:
    wt feature-branch                    # Create worktree with given name from main
    wt feature-branch develop           # Create worktree from develop branch
    wt feature --no-copy                # Don't copy any files
    wt feature --no-cursor              # Don't open in Cursor

Configuration:
    Project config: .wtconfig in git root
    User config: ~/.wtconfig

    Config file format (YAML):
    copy_files:
      - .env
      - .env.local
      - .mise.toml
    copy_dirs:
      - .vscode
      - .cursor
      - config/credentials
EOF
}

# Function to parse YAML config file (simple implementation)
parse_config() {
    local config_file=$1
    local section=""

    if [[ ! -f "$config_file" ]]; then
        return
    fi

    while IFS= read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue

        # Check for section headers
        if [[ "$line" =~ ^copy_files:[[:space:]]*$ ]]; then
            section="files"
        elif [[ "$line" =~ ^copy_dirs:[[:space:]]*$ ]]; then
            section="dirs"
        elif [[ "$line" =~ ^[[:space:]]*-[[:space:]](.+) ]]; then
            # Extract item after "- "
            local item="${match[1]}"
            if [[ "$section" == "files" ]]; then
                CONFIG_COPY_FILES+=("$item")
            elif [[ "$section" == "dirs" ]]; then
                CONFIG_COPY_DIRS+=("$item")
            fi
        else
            # Reset section if we hit a non-list line
            section=""
        fi
    done < "$config_file"
}

# Function to get files to copy based on priority
get_files_to_copy() {
    local -a files=()
    local -a dirs=()

    # 1. Built-in defaults - expanded to include more common files
    local default_files=(.env .env.local .env.development .env.production .env.test .mise.toml .envrc)
    local default_dirs=(.vscode .cursor .idea .fleet .zed .nova .sublime .devcontainer config/credentials)

    # Add defaults if they exist
    for f in "${default_files[@]}"; do
        [[ -f "$project_dir/$f" ]] && files+=("$f")
    done

    for d in "${default_dirs[@]}"; do
        [[ "$d" != ".git" && -d "$project_dir/$d" ]] && dirs+=("$d")
    done

    # 2. Project config
    local project_config="$project_dir/.wtconfig"
    if [[ -f "$project_config" ]]; then
        local CONFIG_COPY_FILES=()
        local CONFIG_COPY_DIRS=()
        parse_config "$project_config"
        files+=("${CONFIG_COPY_FILES[@]}")
        for d in "${CONFIG_COPY_DIRS[@]}"; do
            [[ "$d" != ".git" ]] && dirs+=("$d")
        done
    fi

    # 3. User config
    local user_config="$HOME/.wtconfig"
    if [[ -f "$user_config" ]]; then
        local CONFIG_COPY_FILES=()
        local CONFIG_COPY_DIRS=()
        parse_config "$user_config"
        files+=("${CONFIG_COPY_FILES[@]}")
        for d in "${CONFIG_COPY_DIRS[@]}"; do
            [[ "$d" != ".git" ]] && dirs+=("$d")
        done
    fi

    # Remove duplicates
    local -A seen_files seen_dirs
    local unique_files=() unique_dirs=()

    for f in "${files[@]}"; do
        if [[ -z "${seen_files[$f]}" ]]; then
            seen_files[$f]=1
            unique_files+=("$f")
        fi
    done

    for d in "${dirs[@]}"; do
        if [[ -z "${seen_dirs[$d]}" && "$d" != ".git" ]]; then
            seen_dirs[$d]=1
            unique_dirs+=("$d")
        fi
    done

    echo "FILES:${unique_files[*]}"
    echo "DIRS:${unique_dirs[*]}"
}

# Main script
main() {
    # Parse arguments
    local branch_name=""
    local base_branch="$DEFAULT_BASE_BRANCH"
    local no_copy=false
    local no_cursor=false

    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-copy)
                no_copy=true
                shift
                ;;
            --no-cursor)
                no_cursor=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--version)
                echo "wt version $VERSION"
                exit 0
                ;;
            -*)
                print_color $RED "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                if [[ -z "$branch_name" ]]; then
                    branch_name="$1"
                elif [[ -z "$base_branch" || "$base_branch" == "$DEFAULT_BASE_BRANCH" ]]; then
                    base_branch="$1"
                else
                    print_color $RED "Too many arguments"
                    show_usage
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # Validate branch name
    if [[ -z "$branch_name" ]]; then
        print_color $RED "‚ùå No branch name provided"
        show_usage
        exit 1
    fi

    # Check if we're in a git repository
    if ! git rev-parse --show-toplevel &> /dev/null; then
        print_color $RED "‚ùå Not in a git repository"
        exit 1
    fi

    # Get project directory and name
    local project_dir=$(git rev-parse --show-toplevel)
    local project_name=$(basename "$project_dir")

    # Define worktree paths
    local worktree_parent="${project_dir}/../${project_name}-worktrees"
    local worktree_path="${worktree_parent}/${branch_name}"

    # Create parent directory
    mkdir -p "$worktree_parent"

    # Check if worktree already exists
    if [[ -d "$worktree_path" ]]; then
        print_color $RED "‚ùå Worktree already exists at: $worktree_path"
        exit 1
    fi

    # Create the worktree
    if git show-ref --verify --quiet "refs/heads/$branch_name"; then
        print_color $BLUE "üîÑ Branch '$branch_name' already exists, creating worktree..."
        git -C "$project_dir" worktree add "$worktree_path" "$branch_name"
    else
        if ! git show-ref --verify --quiet "refs/heads/$base_branch"; then
            print_color $RED "‚ùå Base branch '$base_branch' does not exist"
            exit 1
        fi
        print_color $BLUE "üåø Creating new branch '$branch_name' from '$base_branch'..."
        git -C "$project_dir" worktree add -b "$branch_name" "$worktree_path" "$base_branch"
    fi

    # Copy files if not disabled
    if [[ "$no_copy" != true ]]; then
        local copy_result=$(get_files_to_copy)
        local files_line=$(echo "$copy_result" | grep "^FILES:")
        local dirs_line=$(echo "$copy_result" | grep "^DIRS:")

        IFS=' ' read -A copy_files <<< "${files_line#FILES:}"
        IFS=' ' read -A copy_dirs <<< "${dirs_line#DIRS:}"

        # Copy files (exclude .git)
        for file in "${copy_files[@]}"; do
            if [[ -n "$file" && "$file" != ".git" && -f "$project_dir/$file" ]]; then
                cp "$project_dir/$file" "$worktree_path/$file"
                print_color $GREEN "üìÑ Copied $file"
            fi
        done

        # Copy directories (excluding .git)
        for dir in "${copy_dirs[@]}"; do
            if [[ -n "$dir" && "$dir" != ".git" && -d "$project_dir/$dir" ]]; then
                # Create parent directory structure if needed
                local target_dir="$worktree_path/$(dirname "$dir")"
                mkdir -p "$target_dir"
                cp -R "$project_dir/$dir" "$target_dir/"
                print_color $GREEN "üìÅ Copied $dir"
            fi
        done
    fi

    # Open in Cursor if not disabled
    if [[ "$no_cursor" != true ]] && command -v cursor &> /dev/null; then
        cursor "$worktree_path" &
        print_color $GREEN "üöÄ Opening in Cursor..."
    fi

    # Success message
    print_color $GREEN "‚úÖ Worktree '$branch_name' created at:"
    print_color $GREEN "   $worktree_path"
}

# Run main function
main "$@"
